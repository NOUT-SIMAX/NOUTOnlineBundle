
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <!-- Support pour IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>{% if customization.actif and customization.window_title is not empty %}{{ customization.window_title }}{% else %}{{ 'login.sign_in' | trans }}{% endif %}</title>
	{% block stylesheets %}

        <!-- icon -->
        {% if customization.actif and customization.favicon_file is not empty %}
            <link rel="icon" href="{{ asset('custom/') }}{{ customization.favicon_file }}" />
        {% else %}
            <link rel="shortcut icon" href="{{ asset('bundles/noutsessionmanager/img/favicon.ico')  ~ "?v=13.1" }}" type="image/x-icon"/>
            <link rel="icon" href="{{ asset('bundles/noutsessionmanager/img/favicon.ico')  ~ "?v=13.1" }}" type="image/x-icon"/>
        {% endif %}

		<!-- feuille de style -->
		<link rel="stylesheet" href="{{ asset('vendors/bootstrap/css/bootstrap.min.css') }}" />
        <link rel="stylesheet" href="{{ asset('bundles/noutsessionmanager/style/style.css') }}" />

        {% if customization.actif and customization.css_file is not empty %}
            <link rel="stylesheet" href="{{ asset('custom/') }}{{ customization.css_file }}" />
        {% endif %}

        {% if customization.css_text is not empty %}
            <style type="text/css">
                {{ customization.css_text | base64_decode | raw }}
            </style>
        {% endif %}
	{% endblock%}
</head>
<body>

{#<div class="container">#}

	<div id="loginbox" class="mainbox col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">
        {% if customization.title is not empty or customization.logo_file is not empty %}
            <div class="custom_logo_title">
                {% if customization.actif  %}
                    {% if customization.logo_file is not empty %}
                        <div class="custom_logo" style="background-image: url('{{ asset('custom/') }}{{ customization.logo_file }}');"></div>
                    {% endif %}
                    {% if customization.title is not empty %}
                    <h1 class="custom_title">
                    {{ customization.title }}
                    </h1>
                    {% endif %}
                {% endif %}
            </div>
		{% endif %}
		<div class="panel" >
            {% set isMin = true %}
			<div class="panel-heading">
				<div class="panel-title">
                    {% if extranet %}<span class="glyphicon glyphicon-globe"></span> {% endif %}
                    {{ 'login.sign_in' | trans }}
                    <div class="languages">
                        <span class="selected_language"></span>
                        <div class="available_languages">
                           <ul class="available_languages">
                                {% for language in available_languages %}
                                    <li class="language" onclick="loadLanguage(code={{ language.code }})">
                                        <img src="{{ asset("img/ihm/Flags/#{language.short}.png") }}" title="{{ language.lang }}"/>{{ language.lang }}
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                </div>
			</div>
			<div style="padding-top:30px" class="panel-body" >
				<form id="loginform" class="form-horizontal" role="form" action="{{ path('login_check') }}" method="post">
					{% if error %}
					<div style="margin-bottom: 25px" class="input-group col-sm-12">
						<div id="login-alert" class="alert alert-danger col-sm-12 ">
                            {% if error.messageData is defined %}
                                {{ error.message|trans(error.messageData, 'security') }}
                            {% else %}
                                {{ error.message|trans }}
                            {% endif %}
                        </div>
					</div>
					{% endif %}
                    {% if not noutonline_is_started() %}
                        {# NOUTOnline ne répond pas #}
                        {{ 'login.noutonline_no_answer' | trans | nl2br }}
                    {% elseif not noutonline_is_versionmin() %}
                        {% set isMin = false %}
                        {{ 'login.noutonline_no_versionmin' | trans | replace({'%version%': version_min}) | nl2br }}
                    {% else %}
                        {# Tout va bien on peut se connecter #}
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                            <input id="login-username" type="text" class="form-control" name="m_sLogin" value="{{ last_username }}" placeholder="{{ 'login.login' | trans }}" required
                                   onchange="$('#login-alert').hide()" oninput="$('#login-alert').hide()">
                        </div>
                        <div style="margin-bottom: 25px" class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-lock"></i></span>
                            <input id="login-password" type="password" class="form-control" name="m_sPass" placeholder="{{ 'login.password' | trans }}"
                                   onchange="$('#login-alert').hide()" oninput="$('#login-alert').hide()">
                        </div>
                        <div style="margin-bottom: 25px" class="input-group hidden">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-time"></i></span>
                            <select class="form-control" id="login-timezone" name="m_sTimeZone">
                                {% for zone in timezone_list %}
                                    <option value="{{ zone.zone }}" {% if last_timezone == zone.zone %} selected {% endif %}  >UTC/GMT {{ zone.diff_from_GMT }} - {{ zone.zone }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <input id="m_sLocale" type="hidden" name="m_sLocale"/>
                        <div style="margin-top:10px" class="form-group">
                            <!-- Button -->
                            <div class="col-sm-12 controls">
                                <button type="submit" class="btn btn-default btn-login" onclick="$('#login-alert').hide()">{{ 'login.connection' | trans }}</button>
                            </div>
                        </div>
                    {% endif %}
				</form>
			</div>
			<div class="panel-footer">
				© NOUTWeb {{ version_site }}
				<br />
                © NOUTOnline <span {% if not isMin %}class="text-danger" style="font-weight: bold"{% endif %}>{{ noutonline_version() }}</span>
			</div>
		</div>
	</div>
{#</div>#}

{% block javascripts %}
	<!-- Latest compiled and minified JavaScript -->
	<script type="text/javascript" src="{{ asset('vendors/jquery/jquery.min.js') }}"></script>
	<script type="text/javascript" src="{{ asset('vendors/bootstrap/js/bootstrap.min.js') }}"></script>
	<script type="text/javascript" src="{{ asset('vendors/jstz/jstz.min.js') }}"></script>

	<script type="text/javascript">
        var languages = {{ available_languages|json_encode|raw }};
        var baseImgUrl = '{{ asset("img/ihm/Flags/") }}';
        var $availableLanguages = $(".available_languages");
		$( document ).ready(function() {
			var hasSelected = $('#login-timezone').has('[selected]').length > 0;
			if (!hasSelected)
			{
				var timezone = jstz.determine();
				$("#login-timezone").val(timezone.name());
			}

			$(document).click(function(e) {
			    if(
			        e.target == $('.selected_language')[0] ||
                    $(e.target).parents().toArray().find(function(el) {return el == $('.selected_language')[0]})
                )
			        return;
                $availableLanguages.hide();
            });

			$(".selected_language").click(function() {
                $availableLanguages.toggle();
            });

			$(".languages").on('dblclick', '.selected_language', function(e) { e.preventDefault() });

            $availableLanguages.hide();
			loadLanguage();
		});

		function loadLanguage(code = 12) {
		    if(!languages.length || languages.length == 1) {
		        $(".languages").remove();
		        return;
            }
            var language = languages.find(function(language){ return language.code == code });
            if(!language)
                language = languages[0];
            var $selectedLanguage = $('span.selected_language');
            $selectedLanguage.html('<img src="' + baseImgUrl + language.short + '.png"/>');
            $("#m_sLocale").val(language.code);
            return languages[code];
        };

        // https://tc39.github.io/ecma262/#sec-array.prototype.find
        if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, 'find', {
                value: function(predicate) {
                    // 1. Let O be ? ToObject(this value).
                    if (this == null) {
                        throw new TypeError('"this" is null or not defined');
                    }

                    var o = Object(this);

                    // 2. Let len be ? ToLength(? Get(O, "length")).
                    var len = o.length >>> 0;

                    // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                    if (typeof predicate !== 'function') {
                        throw new TypeError('predicate must be a function');
                    }

                    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                    var thisArg = arguments[1];

                    // 5. Let k be 0.
                    var k = 0;

                    // 6. Repeat, while k < len
                    while (k < len) {
                        // a. Let Pk be ! ToString(k).
                        // b. Let kValue be ? Get(O, Pk).
                        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                        // d. If testResult is true, return kValue.
                        var kValue = o[k];
                        if (predicate.call(thisArg, kValue, k, o)) {
                            return kValue;
                        }
                        // e. Increase k by 1.
                        k++;
                    }

                    // 7. Return undefined.
                    return undefined;
                }
            });
        }
	</script>
{% endblock %}
</body>
</html>












